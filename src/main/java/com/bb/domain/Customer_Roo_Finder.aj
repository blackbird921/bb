// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bb.domain;

import com.bb.domain.Customer;
import com.bb.reference.CustomerRole;
import com.bb.reference.CustomerStatus;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Customer_Roo_Finder {
    
    public static TypedQuery<Customer> Customer.findCustomersByCustomerRole(CustomerRole customerRole) {
        if (customerRole == null) throw new IllegalArgumentException("The customerRole argument is required");
        EntityManager em = Customer.entityManager();
        TypedQuery<Customer> q = em.createQuery("SELECT o FROM Customer AS o WHERE o.customerRole = :customerRole", Customer.class);
        q.setParameter("customerRole", customerRole);
        return q;
    }
    
    public static TypedQuery<Customer> Customer.findCustomersByEmail(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Customer.entityManager();
        TypedQuery<Customer> q = em.createQuery("SELECT o FROM Customer AS o WHERE o.email = :email", Customer.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<Customer> Customer.findCustomersByStatus(CustomerStatus status) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Customer.entityManager();
        TypedQuery<Customer> q = em.createQuery("SELECT o FROM Customer AS o WHERE o.status = :status", Customer.class);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Customer> Customer.findCustomersByUsername(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Customer.entityManager();
        TypedQuery<Customer> q = em.createQuery("SELECT o FROM Customer AS o WHERE o.username = :username", Customer.class);
        q.setParameter("username", username);
        return q;
    }
    
}
